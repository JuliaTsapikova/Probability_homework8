#Даны значения величины заработной платы заемщиков банка (zp) 
#и значения их поведенческого кредитного скоринга 
#(ks): zp = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110], 
#ks = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832]. 
#Найдите ковариацию этих двух величин с помощью элементарных действий, 
#а затем с помощью функции cov из numpy Полученные значения должны быть равны. 
#Найдите коэффициент корреляции Пирсона с помощью ковариации и среднеквадратичных 
#отклонений двух признаков, а затем с использованием функций из библиотек numpy и pandas.

import numpy as np
import scipy.stats as stats
from scipy.stats import t
zp = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
ks = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])
CorrCoef = np.corrcoef(zp, ks)
print(CorrCoef)
#сильная линейная зависимость
Cov = np.cov(zp, ks, bias=True)
print(Cov)
std_zp = np.std(zp)
print(std_zp)
std_ks = np.std(ks)
print(std_ks)
result = 9157.84/(174.55340157098058 * 59.115480206118605)
print(result)
#Коэффициент корреляции Пирсона равен 0.8874900920739162

#2)Измерены значения IQ выборки студентов, обучающихся в местных технических вузах:
#   131, 125, 115, 122, 131, 115, 107, 99, 125, 111. 
#Известно, что в генеральной совокупности IQ распределен нормально. 
#Найдите доверительный интервал для математического ожидания с надежностью 0.95.

a = np.array([131, 125, 115, 122, 131, 115, 107, 99, 125, 111])
x1 = np.mean(a)
print(x1)
d1 = np.var(a, ddof=1)
print(d1)
t1 = stats.t.ppf(0.975, 9)
print(t1)
res1 = x1 - t1 * np.sqrt(d1/10)
res2 = x1 + t1 * np.sqrt(d1/10)
print(res1,res2)
#Доверительный интервал для математического ожидания с надежностью 0.95 
#составляет 110.56;125.64


#3)Известно, что рост футболистов в сборной распределен нормально с дисперсией 
#генеральной совокупности, равной 25 кв.см. Объем выборки равен 27, 
#среднее выборочное составляет 174.2. 
#Найдите доверительный интервал для математического ожидания с надежностью 0.95.

x_1 = 174.2
d_1 = 5
t_1 = stats.t.ppf(0.975, 26)
print(t_1)
res_1 = x_1 - t_1 * np.sqrt(d_1/27)
res_2 = x_1 + t_1 * np.sqrt(d_1/27)
print(res_1, res_2)
#Доверительный интервал для математического ожидания с надежностью 0.95
#составляет 173.32; 175.08.



